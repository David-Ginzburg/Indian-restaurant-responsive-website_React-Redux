{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n}); // export const feedbackFailed = (errmess) => ({\n//     type: ActionTypes.FEEDBACK_FAILED,\n//     payload: errmess\n// });\n\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addFeedback(response))).then(response => alert('Thank you for your feedback!\\n' + JSON.stringify(response.payload))).catch(error => {\n    console.log('post feedback', error.message);\n    alert('Your feedback could not be processed\\nError: ' + error.message);\n  });\n};\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw error;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw error;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw error;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw error;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["/Users/Vadim/Desktop/React/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addFeedback","feedback","type","ADD_FEEDBACK","payload","postFeedback","firstname","lastname","telnum","email","agree","contactType","message","dispatch","newFeedback","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","alert","catch","console","log","addComment","comment","ADD_COMMENT","postComment","dishId","rating","author","newComment","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addFeedback = (feedback) => ({\r\n    type: ActionTypes.ADD_FEEDBACK,\r\n    payload: feedback\r\n});\r\n\r\n// export const feedbackFailed = (errmess) => ({\r\n//     type: ActionTypes.FEEDBACK_FAILED,\r\n//     payload: errmess\r\n// });\r\n\r\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => (dispatch) => {\r\n    const newFeedback = {\r\n        firstname: firstname, \r\n        lastname: lastname,\r\n        telnum: telnum,\r\n        email: email, \r\n        agree: agree,\r\n        contactType: contactType,\r\n        message: message\r\n    };\r\n    newFeedback.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'feedback', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newFeedback),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            throw error;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addFeedback(response)))\r\n        .then(response => alert('Thank you for your feedback!\\n' + JSON.stringify(response.payload)))\r\n        .catch(error =>  { console.log('post feedback', error.message); alert('Your feedback could not be processed\\nError: '+error.message); });\r\n\r\n}\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            throw error;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n};\r\n\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch( baseUrl + 'dishes' )\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n                error.response = response; \r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw error;\r\n        })\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\n\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n            error.response = response; \r\n            throw error;\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message);\r\n        throw error;\r\n    })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\n\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n            error.response = response; \r\n            throw error;\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message);\r\n        throw error;\r\n    })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    dispatch(leadersLoading());\r\n\r\n    return fetch(baseUrl + 'leaders')\r\n    .then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n            error.response = response; \r\n            throw error;\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message);\r\n        throw error;\r\n    })\r\n    .then(response => response.json())\r\n    .then(leaders => dispatch(addLeaders(leaders)))\r\n    .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});"]},"metadata":{},"sourceType":"module"}